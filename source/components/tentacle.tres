[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

// Constants

const vec2 SIZE = vec2(1280.0, 720.0);
const float SUCTION_OUTER = 7.0;
const float SUCTION_INNER = 4.0;
const float TENTACLE_OUTLINE_WIDTH = 5.0;
const float TENTACLE_SHADED_WIDTH = 10.0;


// Variables

uniform sampler2D tentacles;
uniform int tentacle_count;

uniform vec4 color_outline: hint_color;
uniform vec4 color_shadow: hint_color;
uniform vec4 color_tentacle: hint_color;
uniform vec4 color_suction: hint_color;


// Helper methods


float lerp(float a, float b, float t)
{
	return a + t * (b - a);
}

vec4 fetch_data(int x, int y)
{
	return texelFetch(tentacles, ivec2(x, y), 0);
}


vec2 point_on_line(vec2 a, vec2 b, vec2 p)
{
	vec2 ab = b - a; 
	vec2 ap = p - a;
	
	float ab_ap = dot(ap, ab);
	float ab_ab = dot(ab, ab); 
	
	float d = ab_ap / ab_ab;
	
	if (d <= 0.0) return a;
	if (d >= 1.0) return b;
	
	return a + d * ab;
}


// Methods

vec4 get_color_at_position(vec2 position)
{
	for (int y = 0; y < tentacle_count; ++y)
	{
		vec4 metadata = fetch_data(0, y) * 1000.0;
		
		// Closest line
		vec2 l[2]; // line points
		float d = 10000.0; // distance to line
		float cd = 0.0; // current distance
		float td = 0.0; // total distance
		int i = 0; // part index
		
		vec2 prev = fetch_data(1, y).xy * SIZE;
		
		for (int x = 2; x <= int(metadata.x); ++x)
		{
			vec2 curr = fetch_data(x, y).xy * SIZE;
			
			vec2 pn = point_on_line(prev, curr, position);
			float dn = distance(position, pn);
			
			if (dn < d)
			{
				l[0] = prev;
				l[1] = curr;
				d = dn;
				cd = td + distance(prev, pn);
				i = x;
			}
			
			td += distance(curr, prev);
			
			prev = curr;
		}
		
		for (int li = 0; li < 2; ++li)
		{
			if ((i + li) % int(ceil(metadata.w)) != 0)
			{
				continue;
			}
			
			float dl = distance(l[li], position);
			
			if (SUCTION_INNER < dl && dl < SUCTION_OUTER)
			{
				return color_suction;
			}
		}
		
		float delta = cd / td;
		float width = lerp(metadata.y, metadata.z, delta);
		
		if (d < width - TENTACLE_SHADED_WIDTH)
		{
			return color_tentacle;
		}
		
		if (d < width - TENTACLE_OUTLINE_WIDTH)
		{
			return color_shadow;
		}
		
		if (d < width)
		{
			return color_outline;
		}
	}
	
	return vec4(0.0);
}


// Lifecycle method


void fragment()
{
	vec2 position = UV * SIZE;
	
	COLOR = get_color_at_position(position);
}"
